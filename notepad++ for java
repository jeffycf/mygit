1. 安装JDK
    下载JDK 6下载
http://developers.sun.com.cn/download/java_se.html
运行安装程序，按照屏幕提示完成JDK 6的安装，下面为安装路径：
E:\Program Files\Java\jdk1.6.0_02
运行“命令控制符”程序，执行如下命令：
javac
系统提示如下错误：
'javac' 不是内部或外部命令，也不是可运行的程序或批处理文件。

    为了能够在控制台窗口中方便的使用JDK中的工具，需要在Windows系统环境变量PATH中追加JDK二进制（bin）文件所在的路径，在控制台窗口中执行如下命令，更新PATH环境变量。
set path=.;%path%;E:\Program Files\Java\jdk1.6.0_02\bin

2. 安装Notepad++
Notepad++是运行在Windows操作系统下的一款代码编辑器软件，能够对绝大多数的编程语言进行语法着色，为自由软件，遵循GPL。下载地址为：
http://notepad-plus.sourceforge.net/uk/site.htm
按照屏幕提示进行完成安装。

3. 配置Notepad++
3.1 单词自动补全功能配置
    Notepad++提供了一系列编程相关的功能，如自动识别源代码类型，支持自动缩进，语法着色，支持单词/函数名称自动补全功能等。Notepad++默认设置支持了大部分代码编写功能，下面将使Notepad++支持“单词自动补全”功能。
    点击“设置”菜单，选择“首选项”菜单项，弹出“首选项对话框”，选中“备份与自动完成”，在此标签页底部中选中“所有输入均启用自动完成”复选框，并选择“单词自动完成”。
3.2 Notepad++的插件NppExec实现Console Dialog，此插件可以完成Windows控制台基本功能，如可以在此窗口中进行编译、运行Java程序；Notepad++还能够运行外部程序，通过菜单项与外部程序建立映射关系，支持为外部程序输入参数等。

3.3 Console Dialog作为Java开发环境
显示Console Dialog对话框
点击“插件”主菜单，在其下拉菜单中选中“NppExec”，在二级菜单中选中“Show Console Dialog”。
默认在编辑器的底部出现Console Dialog。

编辑Java源文件
新建一个Java源文件HelloNpp.java，在编辑器中输入如下内容：
public class HelloNpp{
    public static void main(String[] args){
        System.out.println("Hello Notepad++!");
    }
}

3.4 编译Java程序
切换到Console Dialog窗口，编译HelloNpp.java
java HelloNpp.java
在Console Dialog中编译器输出结果如下图3，图中黑色字体表示用户输入的命令，绿色字体为Console Dialog的输出信息，与Windows 命令行程序相比多输出一些信息，表示程序执行的开始与结束，最后输出的信息表示Console Dialog处于等待新的命令状态。

3.5 运行Java程序
切换到Console Dialog窗口中，执行：
java HelloNpp
在Console Dialog窗口中输出结果。

4. 配置Java外部工具
4.1 Notepad++环境变量
    表1为Notepad++定义的这些环境，可以作为参数传递给外部工具
变量名称                含义                 例子
FULL_CURRENT_PATH     文件路径名称        E:\java\HelloNpp.java
CURRENT_DIRECTORY     文件目录            E:\java\
FILE_NAME             文件全名称            HelloNpp.java
NAME_PART             文件名称            HelloNpp
EXT_PART              文件扩展名            java

4.2 创建外部工具
    这两个外部工具为javac和java，增加了暂停功能，可以在编译或运行Java程序时通过控制台窗口显示输出信息。
4.2.1 javacnpp.bat：编译当前Java源文件，需要一个指定Java源文件作为参数，运行后屏幕处于暂停状态，并显示编译程序的执行结果。以下为javacnpp.bat代码：

@echo on
javac %1
pause

4.2.2 Javanpp.bat：运行Java的class二进制文件，需要指定两个参数，第一个参数为class文件所在的目录；第二个参数为Java程序名称。运行后屏幕处于暂停状态，显示程序执行的结果。以下为javanpp.bat代码：

@echo on
java -cp %1 %2
pause

4.3 创建javac菜单
    此菜单项用来编译Java源代码，生成class文件。选择主菜单“运行”，在下拉菜单中选择“运行...”或使用快捷键F5，显示“运行”对话框,输入如下运行程序名
"E:\Program Files\Notepad++\javacnpp.bat" $(FULL_CURRENT_PATH)

    javacnpp.bat为上述创建的外部工具，$(FULL_CURRENT_PATH)为当前编辑的Java源代码文件。
点击“保存”按钮，在名称编辑框中输入此外部工具名称，如javac；在快捷方式对话框中选择执行此外部程序对应的快捷键，选中(Control+Shift+J)作为编译Java源代码的快捷方式。

4.4 创建java菜单
    java菜单用来运行java程序，创建的方式与javac菜单相同，但各自使用不同的外部工具，在“运行”对话框中输入运行程序名称：
"E:\Program Files\Notepad++\javanpp.bat" $(CURRENT_DIRECTORY) $(NAME_PART)

    javanpp.bat为上述创建的外部工具，$(CURRENT_DIRECTORY)为Java class文件所在的目录，$(NAME_PART)为文件名称（不包含扩展名）。
点击“保存”按钮，在名称编辑框中输入此外部工具名称，如java；在快捷方式对话框中选择执行此外部程序对应的快捷键，选中(Control+Shift+X)作为运行Java程序的快捷方式。

    建立这两个外部工具后，在“运行”菜单中会增加两个菜单项：javac和java，分别用来编译Java源代码和运行Java程序。在代码编辑区完成编写工作后，执行javac命令（或使用快捷键Ctrl+Shift+J）编译当前Java源代码文件；编译通过后再执行java(或使用快捷键Ctrl+Shift+X）运行编译后的Java程序。


5. 小结
    本文介绍了如何使用Notepad++与JDK集成作为一个简单的Java IDE，适合与Java初学者。文中将所有的Java源文件都放置到缺省包（package）中，没有使用自定义包(package），如果使用import/package关键字，按照本文描述的配置执行javac或java，则会在运行时会出现“ java.lang.NoClassDefFoundError:”错误，建议采用Console Dialog中执行。
